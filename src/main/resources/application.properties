# Instance configurations
# Name of the instance, is used to identify the instance in the backend, every instance should have a unique name
spring.application.name=http-server-instance-01
# Ip address of the instance, is used to identify the instance in the backend
server.ip=127.0.0.1
# port that will be opened on the server to start the application
server.port=9005
# The initial status of the instance, it can be STARTED or STOPPED and determines if the instance is able to receive requests
instance.initial.status=STARTED
# Protocol, for every http-instance must be HTTP
instance.protocol=HTTP
# scheme could be http or https, this is used to build the url for the rating request
instance.scheme=http
# rating request api key is used to authenticate the rating request, the backend must use the same api key to authenticate the request, if the api key is not present the request will be rejected
instance.ratingRequest.apiKey=fe34b3ce-877e-4c61-a846-033320a9951f

# Configuration for Redis Cluster - Jedis
# list of nodes
redis.cluster.nodes=127.0.0.1:7000,127.0.0.1:7001,127.0.0.1:7002,127.0.0.1:7003,127.0.0.1:7004,127.0.0.1:7005,127.0.0.1:7006,127.0.0.1:7007,127.0.0.1:7008,127.0.0.1:7009
redis.threadPool.maxTotal=60
redis.threadPool.maxIdle=50
redis.threadPool.minIdle=10
redis.threadPool.blockWhenExhausted=true
redis.connection.timeout=2000
redis.so.timeout=2000
redis.maxAttempts=20
redis.connection.user=
redis.connection.password=

# name of the list in redis where the delivery_sm will be stored.
redis.queue.deliver=http_dlr
queue.consumer.workers=11
queue.consumer.batch.size=10000
queue.consumer.scheduler=1000

# WebSocket server configurations
# WebSocket server enabled
websocket.server.enabled=true
# WebSocket server host
websocket.server.host=localhost
# WebSocket server port
websocket.server.port=8080
# WebSocket server path
websocket.server.path=/ws
# WebSocket server internal Seconds
websocket.retry.intervalSeconds=10
#Header name for connect to websocket server, this must be provided by backend
websocket.header.name=Authorization
#Header value for connect to websocket server, this must be provided by backend
websocket.header.value=fcb13146-ecd7-46a5-b9cb-a1e75fae9bdc

# Hash table in redis to manage the service provider.
# This should match what is configured in the backend.
smpp.serviceProvidersHashName=service_providers

#Configuration for SmppServer
#hash name for configurations, this hash contains the configurations for every instance, this instance is registered/unregistered itself in this hash
smpp.server.configurationHashName=configurations

http.server.general.settings.hash=general_settings
http.server.general.settings.key=smpp_http

# Management endpoints
management.endpoints.web.exposure.include=loggers
management.endpoint.loggers.enabled=true

# Process
redis.preMessageList=preMessage